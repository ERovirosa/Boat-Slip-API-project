{
	"info": {
		"_postman_id": "03617af4-e19d-4bca-97d2-50b9c25b3f4c",
		"name": "Final-Assign",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8aaa7c5-dce1-4f73-89ee-c49b0042b5a0",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{school}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "jwt",
							"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijk2MGE3ZThlODM0MWVkNzUyZjEyYjE4NmZhMTI5NzMxZmUwYjA0YzAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNDk3OTY5NTM0NzgxLWN2OGU3aXJidXE0NWt1amtucmk5a2lkM3RwcDZhb2FhLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNDk3OTY5NTM0NzgxLWN2OGU3aXJidXE0NWt1amtucmk5a2lkM3RwcDZhb2FhLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTEwMjA2MjM3NzM4MTE2MTc2NzU5IiwiaGQiOiJvcmVnb25zdGF0ZS5lZHUiLCJlbWFpbCI6InJvdmlyb3NlQG9yZWdvbnN0YXRlLmVkdSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiQVp1SXZ1NHN4RmdsNTAzY3F3OHdKdyIsImlhdCI6MTU5MDAxNjk0NCwiZXhwIjoxNTkwMDIwNTQ0fQ.FtZ_vZYpPSZeIjckDvlP6b2ax-akrPdvT-FipaojMrK1bYN4qRwa4dHYR4nEy38uAnf8kcX3f3qc2masQwSIRqPfe7VfZCiTtxyZ9EY_YR0z0aCU2b2DS-dScv4cC0J3J5xPee9Bg6eVKfSoebyPKn8LvDQKfGsfqev2AHy3EQMuyo47mNCmH6v7Ff4PzHz0XSdMY5FfeJ5Rmv29EvM-P_IqOOsPmhfytvV8bgZW8izIX-KxpmuImqr5ofmjd0WYZOxmzqWD1ESszX9y6HOdMMnaNVOEdBt_wzBWBed26cCIJO10y5Tlzm2yjslhiePyp8ab_lOYMzZkcIhVJei0MQ",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post boat school",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0364f6f7-d020-4414-acc5-93efdafe7f4c",
						"exec": [
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"user_id1\", pm.response.json()[\"owner\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "jwt",
							"value": "badjwt",
							"description": "bad",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post boat without jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85b3b4d0-8df3-4dc6-bcff-1d903c4ce07b",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "jwt",
							"value": "badjwt",
							"description": "bad",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5daffeda-40a3-47ae-aa3e-7893e09f1683",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post boat personal",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54f10323-bd7e-481c-bc5c-a0b40c42fc8f",
						"exec": [
							"pm.environment.set(\"boat_id2\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"user_id2\", pm.response.json()[\"owner\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "jwt",
							"value": "badjwt",
							"description": "bad",
							"disabled": true
						},
						{
							"key": "jwt",
							"value": "{{personal}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27fd6ad8-0d9c-4148-87b5-49ea33ec0556",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat without jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d883660-9fcf-463d-9565-80306068eb5e",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					],
					"query": [
						{
							"key": "jwt",
							"value": "badjwt",
							"description": "bad",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat with incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1598901-0636-43d4-841a-d543bebf1624",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					],
					"query": [
						{
							"key": "jwt",
							"value": "badjwt",
							"description": "bad",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9afb1534-6d32-4c79-930a-91b23ca54594",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat with invalid id 404 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf54439c-86a6-44bb-b89c-364fb568cf7f",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The user with this jwt does not own a boat with this boat ID\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get All boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d8859d7e-a618-4d9c-906d-0325046955af",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get 2nd page of boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e36bbdc-7fe9-4d7c-a6ed-d2cb96fa41ab",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats?limit=5&offset=5",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "5"
						},
						{
							"key": "jwt",
							"value": "{{school}}",
							"disabled": true
						},
						{
							"key": "jwt",
							"value": "badjwt",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat HTML 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07f23b23-969f-4507-bb92-603bf196f894",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1fdf79c-131b-4229-a5a5-ae4470aae53c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					],
					"query": [
						{
							"key": "jwt",
							"value": "{{jwt2}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single boat with wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0fa00fde-d71e-4e94-a34b-3ac633fbea8b",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The user with this jwt does not own a boat with this boat ID\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add slip 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "433983f9-4d4a-4a5b-a0d0-821f2585e93e",
						"exec": [
							"pm.environment.set(\"slip_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"number\": 1,\r\n  \"length\": 20,\r\n  \"width\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "add slip with missing attribute 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "520ca393-2c65-47f1-aa3f-63fa007c36d7",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a5c0757-7959-4d96-a947-f6e6f53f2a0a",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip HTML 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ce20e66c-0a08-470a-9f05-b490c1626f6f",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e93d4186-4149-4605-8408-035e9b9fe42f",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all slips 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1512fc33-73ba-4e6c-97b6-33a8785b7ce5",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat  arrives at slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eaefd1f2-3fbc-45d3-a50c-1ce12ccd1b94",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat arrives at non-empty slip 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b2e3e64-74ae-482d-8719-4e88f858cd45",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The slip is not empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid boat id arrives at slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c57f0892-f9cb-4a9b-aaa4-46474f592136",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or slip don’t exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat arrives at invalid slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b308c8e-a1f4-470a-94ca-52c1af67d065",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or slip don’t exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid boat arrives at invalid slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "428763de-9c84-4a36-98eb-b32f098a56e9",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or slip don’t exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with a current boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79d89480-b083-4ee7-bdd2-9ad3e163f7cc",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"current_boat\"]).to.eq(pm.environment.get(\"boat_id1\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat departs slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "113d3883-a4e7-452c-99f4-0b522446f0e3",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with boat departed 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2bbc0d0a-a70e-44f4-8df3-a02a81c11ac6",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add another boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "164ecd02-6daf-4a2d-aef4-85bb702be6f9",
						"exec": [
							"pm.environment.set(\"boat_id_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mega Boat\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Mega Boat\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat_id_1 arrives at slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14bbae41-e0a1-46fc-97ad-5bf6cb77f57c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat not at slip tries to depart 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d64b00e3-3e85-427e-95cf-ae726f228d8a",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid boat tries to depart slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e441d3eb-dc24-4a4b-8b9c-a9c42d3648ca",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat tries to depart invalid slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed8b8617-09f6-42fa-b179-54548f88228f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_id_1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f43fc6b1-e797-4f22-8fb3-3a8ef136f3cc",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with boat_id_1 deleted 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0cb3b5f7-d82b-4900-87c8-efc65058696a",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{school}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5be9a362-8faa-4cd3-b75c-b42ea50792d5",
						"exec": [
							"pm.test(\"403 not found\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The user with this jwt does not own a boat with this boat ID\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with invalid id 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59fb20b0-1724-41c9-8995-1a1db8787d90",
						"exec": [
							"pm.test(\"403 not found\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The user with this jwt does not own a boat with this boat ID\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete slip with invalid_id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc8f15e5-f5e4-4f6f-9815-d47eb05a5467",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c586740c-b008-49b3-8b9b-0f7f2c5c22a3",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}